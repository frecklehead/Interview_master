/// <reference types="heremaps" />
export declare const initHPlatform: (options?: {
    VERSION: string;
    mapEvents: Record<import("./defaults").mapEventTypes, () => void>;
    MAP_TYPE: "vector.normal.map";
    mapTypes: readonly ["raster.normal.map", "raster.normal.xbase", "raster.normal.xbasenight", "raster.normal.basen", "raster.normal.basenight", "raster.normal.mapnight", "raster.normal.traffic", "raster.normal.trafficnight", "raster.normal.transit", "raster.normal.panoram", "raster.normal.panoramnight", "raster.normal.labels", "raster.normal.metaInfo", "raster.satellite.xbase", "raster.satellite.base", "raster.satellite.map", "raster.satellite.traffic", "raster.satellite.panorama", "raster.satellite.labels", "raster.terrain.xbase", "raster.terrain.base", "raster.terrain.map", "raster.terrain.traffic", "raster.terrain.panorama", "raster.terrain.labels", "raster.incidents", "raster.venues", "vector.normal.map", "vector.normal.xbase", "vector.normal.xbasenight", "vector.normal.basen", "vector.normal.basenight", "vector.normal.mapnight", "vector.normal.traffic", "vector.normal.trafficnight", "vector.normal.transit", "vector.normal.panoram", "vector.normal.panoramnight", "vector.normal.labels", "vector.normal.metaInfo", "vector.satellite.xbase", "vector.satellite.base", "vector.satellite.map", "vector.satellite.traffic", "vector.satellite.panorama", "vector.satellite.labels", "vector.terrain.xbase", "vector.terrain.base", "vector.terrain.map", "vector.terrain.traffic", "vector.terrain.panorama", "vector.terrain.labels", "vector.incidents", "vector.venues"];
    mapOptions: {
        zoom: number;
        center: {
            lat: number;
            lng: number;
        };
        mapType: "vector.normal.map";
    };
    interactive: boolean;
    includeUI: boolean;
    includePlaces: boolean;
    useEvents: boolean;
    containerId: string;
    defaultClassName: string;
    app_id: string;
    app_code: string;
    apikey: string;
} | undefined) => H.service.Platform;
