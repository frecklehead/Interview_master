"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getScript;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var glob = window;
var scripName = 'simpleLoadScript';
var globalCbsName = "_$_".concat(scripName, "CallBacks_$_");
var counter = 0;

var uid = function uid() {
  return "script-".concat(counter++);
};

var type = function type(obj) {
  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
};

var typeObj = function typeObj(obj) {
  return type(obj) === 'object';
};

var typeStr = function typeStr(obj) {
  return type(obj) === 'string';
};

var getCallBackObject = function getCallBackObject() {
  glob[globalCbsName] = !typeObj(glob[globalCbsName]) ? {} : glob[globalCbsName];
  return glob[globalCbsName];
};

var placementNode = function placementNode(opts) {
  if (opts.insertInto) {
    return document.querySelector(opts.insertInto);
  }

  return opts.inBody ? document.body : document.head;
};

var createScript = function createScript(opts) {
  var script = document.createElement('script');

  if (opts.attrs && typeObj(opts.attrs)) {
    for (var _i = 0, _Object$keys = Object.keys(opts.attrs); _i < _Object$keys.length; _i++) {
      var attr = _Object$keys[_i];
      script.setAttribute(attr, opts.attrs[attr]);
    }
  }

  return script;
};

var loadCallBack = function loadCallBack(opts) {
  if (opts.callBack && type(opts.callBack) === 'function') {
    opts.callBack();
  }
};

var loadRemoveScript = function loadRemoveScript(removeScript, where, script) {
  if (removeScript) {
    where.removeChild(script);
  }
};

var prepareCallBack = function prepareCallBack(opts) {
  var callBackName = opts.callBackName;
  var url = opts.url;
  return [url, callBackName ? glob : getCallBackObject(), callBackName || uid()];
};

var getScriptDefaults = {
  jsonp: false,
  callBackParamName: 'callback',
  removeScript: false,
  callBackName: null
};

function getScript() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (arguments.length > 1) {
    return Promise.all(Array.prototype.slice.call(arguments).map(getScript));
  }

  var optsTypeStr = typeStr(opts);
  return new Promise(function (resolve, reject) {
    if (!(typeObj(opts) && opts.url || optsTypeStr)) {
      reject('Error: object with url or url string needed');
      return;
    }

    if (optsTypeStr) {
      opts = {
        url: opts
      };
    }

    opts = Object.assign({}, getScriptDefaults, opts);
    var where = placementNode(opts);

    if (!where) {
      reject('Error: no DOM element to append script');
      return;
    }

    var script = createScript(opts);
    var removeScript = opts.removeScript;
    var jsonp = opts.callBackName || opts.jsonp;

    if (!jsonp) {
      script.addEventListener('load', function () {
        loadRemoveScript(removeScript, where, script);
        loadCallBack(opts);
        resolve(removeScript ? undefined : script);
      });
    } else {
      var _prepareCallBack = prepareCallBack(opts),
          _prepareCallBack2 = _slicedToArray(_prepareCallBack, 3),
          url = _prepareCallBack2[0],
          callBackObj = _prepareCallBack2[1],
          callBackName = _prepareCallBack2[2];

      opts.url = url;

      callBackObj[callBackName] = function (res) {
        delete callBackObj[callBackName];
        loadRemoveScript(removeScript, where, script);
        loadCallBack(opts);
        resolve(res || removeScript ? undefined : script);
      };
    }

    script.addEventListener('error', function () {
      where.removeChild(script);
      reject('Error: loading script');
    });
    script.src = opts.url;
    where.appendChild(script);
  });
}

module.exports = exports.default;